var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [TensorOperator]\nOrder   = [:module, :type, :function]","category":"page"},{"location":"api/#Base.Colon-Union{Tuple{dim}, Tuple{BaseTensor{dim, 2}, BaseTensor{dim, 2}}} where dim","page":"API","title":"Base.Colon","text":"(::Colon)(e₁::BaseTensor{dim},e₂::BaseTensor{dim}) where dim\n(::Colon)(t::Tensor{dim},e::BaseTensor{dim}) where dim\n(::Colon)(e::BaseTensor{dim},t::Tensor{dim}) where dim\n(::Colon)(t₁::Tensor{dim,order_1,N_1},t₂::Tensor{dim,order_2,N_2}) where {dim,order_1,order_2,N_1,N_2}\n\nDouble-dot product for tensors and base tensors. These operaotrs only suit for the tensors that their order greater than or equal to 2. The operations between second-order tensors or base tensors will return a scale value. Other operations will return a low order tensor or base tensor.\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.BaseTensor","page":"API","title":"TensorOperator.BaseTensor","text":"BaseTensor{dim,order,T}\n\nType for base tensors, where dim is the dimension, order is the tensor's order, T is the type for its component.\n\n\n\n\n\n","category":"type"},{"location":"api/#TensorOperator.BaseTensor-Tuple","page":"API","title":"TensorOperator.BaseTensor","text":"BaseTensor(e...)\n\nThe constructor for first-order base tensors with components e. The corresponding component is defaultly set to be 1.0. Only first-order base tensors can be implemented by this function, i.e. order = 1, the high order ones can be constructed by dyadic operator ⊗. The dimension of base tensor depends on the length of inputed components, i.e. dim = length(e).\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.Tensor","page":"API","title":"TensorOperator.Tensor","text":"Tensor{dim,order,N,T}\n\nType for tensor, where dim is the dimension, order is tensor order, N is the number of base tensors in this tensor, T is the data type for component.\n\n\n\n\n\n","category":"type"},{"location":"api/#TensorOperator.Tensor-Tuple{Vararg{BaseTensor}}","page":"API","title":"TensorOperator.Tensor","text":"Tensor(e::BaseTensor...)\n\nConstructor for tensor. Return a tenor with base tensors of e's.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:*-Tuple{Any, BaseTensor}","page":"API","title":"Base.:*","text":"*(c,e::BaseTensor)\n\nTimes operator for a constant and a base tensor. Return a BaseTensor with a component equal to c times the origin component.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:+-Tuple{Vararg{BaseTensor}}","page":"API","title":"Base.:+","text":"+(e::BaseTensor...)\n+(t::Tensor{dim,order},e::BaseTensor{dim,order}) where {dim,order}\n\nPlus operator for tensors and base tensors, where the base tensors should have the same dimension dim, order order and component type T. Return a Tensor onstruced by base tensors e's.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:--Tuple{Any, BaseTensor}","page":"API","title":"Base.:-","text":"-(t,e::BaseTensor)\n\nReturn t plus e that its component is negative.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.sum-Tuple{Vararg{BaseTensor}}","page":"API","title":"Base.sum","text":"sum(e::BaseTensor...)\n\nReturn a tensor with base tensors e.\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.:×-Union{Tuple{T}, Tuple{Tuple{T, T, T}, Tuple{T, T, T}}} where T","page":"API","title":"TensorOperator.:×","text":"×(v₁::Tuple{Vararg{T,3}},v₂::Tuple{Vararg{T,3}}) where T\n×(e₁::BaseTensor{3},e₂::BaseTensor{3})\n×(t::Tensor{dim},e::BaseTensor{dim}) where dim\n×(e::BaseTensor{dim},t::Tensor{dim}) where dim\n×(t₁::Tensor{dim,order_1,N_1},t₂::Tensor{dim,order_2,N_2}) where {dim,order_1,order_2,N_1,N_2}\n\nCross product for tensors and base tensors. These operaotrs only suit for the tensors that their order greater than or equal to 2. The operations between second-order tensors or base tensors will return a scale value. Other operations will return a low order tensor or base tensor.\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.:⊗-Union{Tuple{dim}, Tuple{BaseTensor{dim}, BaseTensor{dim}}} where dim","page":"API","title":"TensorOperator.:⊗","text":"⊗(e₁::BaseTensor{dim},e₂::BaseTensor{dim}) where dim\n⊗(t::Tensor{dim},e::BaseTensor{dim}) where dim\n⊗(e::BaseTensor{dim},t::Tensor{dim}) where dim\n⊗(t₁::Tensor{dim,order_1,N_1},t₂::Tensor{dim,order_2,N_2}) where {dim,order_1,order_2,N_1,N_2}\n\nDyadic operaotrs for tensors and base tensors. Inputing two base tensors returns a high order base tensor. Inputing at least one tensor returns a tensor with high order base tensors.\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.:⋅-Union{Tuple{dim}, Tuple{BaseTensor{dim, 1}, BaseTensor{dim, 1}}} where dim","page":"API","title":"TensorOperator.:⋅","text":"⋅(e₁::BaseTensor{dim},e₂::BaseTensor{dim}) where dim\n⋅(t::Tensor{dim},e::BaseTensor{dim}) where dim\n⋅(e::BaseTensor{dim},t::Tensor{dim}) where dim\n⋅(t₁::Tensor{dim,order_1,N_1},t₂::Tensor{dim,order_2,N_2}) where {dim,order_1,order_2,N_1,N_2}\n\nDot product for tensors and base tensors. The operations carried between first-order tensors or base tensors will return a scale value. Other operations will return a low order tensor or base tensor.\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.project-Union{Tuple{Tensor{dim, 1, N}}, Tuple{N}, Tuple{dim}, Tuple{Tensor{dim, 1, N}, NTuple{dim, BaseTensor{dim, 1}}}} where {dim, N}","page":"API","title":"TensorOperator.project","text":"project(t::Tensor{dim},bases_tensor::Tuple{Vararg{BaseTensor{dim,1},dim}}=(e₁,e₂,e₃)) where dim\n\nProject t to a tensor with the base tensor bases and return it. This function can also be used to simplfy t's base tensors to be independent.\n\n\n\n\n\n","category":"method"},{"location":"api/#TensorOperator.tr-Tuple{Tensor{3, 2}}","page":"API","title":"TensorOperator.tr","text":"tr(t::Tensor{3,2})\n\nReturn the trace of tensor t. This function is only applicatable for the tensor with dim = 3 and order = 2.\n\n\n\n\n\n","category":"method"},{"location":"#TensorOperator.jl","page":"Manual","title":"TensorOperator.jl","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"TensorOperator.jl is an efficient tool to do the tensor calculation.","category":"page"},{"location":"#Features","page":"Manual","title":"Features","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"Use the unicode symbols ⊗, ⋅, × to stands for the dyadic product, dot product, cross product respectively, and overloads Base.Colon as the double-dot product.\nApplicatable for curvilinear coordinate system that has the non-orthogonal basis vectors.\nHigh efficiency","category":"page"},{"location":"#Installation","page":"Manual","title":"Installation","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"using TensorOperator","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"TensorOperator can be installed using the Julia package manger, as follows","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"using Pkg; Pkg.add(\"TensorOperator\")","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"or","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"pkg>add TensorOperator #Press `]` to enter the Pkg REPL mode.","category":"page"},{"location":"#Usage","page":"Manual","title":"Usage","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"Firstly, TensorOperator should be introduced by using sentence.","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"using TensorOperator","category":"page"},{"location":"#Construction","page":"Manual","title":"Construction","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"In TensorOperator, a Tensor is regarded as a tuple of BaseTensor, a BaseTensor is constructed by a basis vector namely base and its corresponding value namely component. By default, the basis tensor in 3D case,e_i i=123, has been defined as a const BaseTensor e₁, e₂, e₃ in TensorOperator. Accordingly, a tensor can be conveniently constructed by the combination of these basis tensor, like","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"u = 1e₁ + 2e₂ + 3e₃","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"For high order tensor, you can use the dyadic product notion to build the high order basis tensor, and sum these to obtain a corresponding high order tensor","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"U = 4e₁⊗e₁ - 5e₂⊗e₃ + 6e₃⊗e₁","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"It is noted that, for above case, U only has three basis tensors that their component is not zero, and there are only three BaseTensor's in U.","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"A plus operation between two BaseTensor with same base is not means to combine their component's. Instead, a Tensor with these two BaseTensor will be created, like","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"V = 6e₁⊗e₂ + e₁⊗e₂ + 8e₂⊗e₃","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"where V acturally has three BaseTensor in it. However, for a W defined by follows","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"W = 7e₁⊗e₂ + 8e₂⊗e₃","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"in this circumstance, V will shares same results with W in tensor calculation.","category":"page"},{"location":"#Curvillinear-system-(non-orthogonal-coordinates)","page":"Manual","title":"Curvillinear system (non-orthogonal coordinates)","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"A specific base tensor can be defined via BaseTensor, like","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"g₁ = BaseTensor(1.0,2.0,3.0)","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"and you can use it with other BaseTensor's that has the same dimensions and orders, for example,","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"v = 9e₁ + 10g₁","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"follow this path, the every coordiante systems, include curvillinear system, is easy to be contructed.","category":"page"},{"location":"#Projection","page":"Manual","title":"Projection","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"From the previous examples, the tensor in TensorOperator.jl can be presented by different base tensors. And you can also get the componenet that has different base tensor. By defaultly, the Base.getindex has been overload to get the component with eᵢ, like","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"u[1]\nU[2,3]","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"even the tensor does not belong the base tensor system of eᵢ's, the corresponding component after projection can also be got via Base.getindex, like","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"v[3]","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"Otherwise, you can get any component that belongs to a custom coordinate system using Base.getindex with keyword bases.","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"g₂ = BaseTensor(4.0,5.0,6.0);\ng₃ = BaseTensor(4.0,5.0,6.0);\nu[2,bases = (g₁,g₂,g₃)]","category":"page"},{"location":"#Operation-examples","page":"Manual","title":"Operation examples","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"The examples about the usage of some tensor calculations in TensorOperator.jl are list below","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"Dyadic product","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"u⊗v","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"Dot product","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"u⋅v","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"Double product","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"U:V","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"Cross product","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"u×v","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"Trace","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"tr(U)","category":"page"}]
}
